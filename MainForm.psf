<File version="3.2">
  <FileID>1a772df6-d861-4d40-8188-ae556e6c1632</FileID>
  <Preview>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
3wf4uNu9/ZPc/PHvVGYASNLdZwBUzJ0GQP4Lc/K/IpdN/oreg19mAEjS3WcAVMydBkD+e/PzCMhf
m6p06tSp4p/Inf65SpI+OQOgYm43AHJXvw0wNjYWu3btqkz5/7f8ud38+UqSbp8BUDF3GgC5fFDm
bwNUKYe/JN19BkDFfNIAkCQpZwBUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEg
SSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMA
SJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUY
AJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAx
BoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABU
jAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkA
FWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwG
QMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqT
AVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLK
ZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKk
MhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAk
qUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEg
SSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMA
SJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUY
AJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAx
BoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABU
jAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkA
FWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwG
QMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqT
AVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLK
ZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKkMhkAFWMASJLKZABUjAEgSSqTAVAxBoAkqUwGQMUYAJKk
Mt33ATAyMhaXLl2KK1eu6HPowMHDceTIUQNAknTH7usAyAf/2NieGE4jYOfYbn0ObR8aifGJiTh9
+vQNXxNJkqZ33wbAuXPn4uLFi8UIyM8E6PPp6n/ziTQCpn9NJEma3n0ZAMePHy/+zIeQ/n7KX4Px
8fEbvi6SJF3tvgyA3IkTJ/T3WP4aGACSpNt13waAJEn63c0AkCTp9zADQJKk38PuyQA4lQbAeLox
SZL0YPSZBkBux/6JGDmYSjckSZIejLZPneOfegAM5NKCkCRJD05Xz/HSA+DV12YvOXY+iitIkqQH
u7HjV2Jg15FPHgB/N+OZ9XsOjxdrQZIkPdgNjh2Jrr4dnzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgPvvC1/4/y8+CiocxbnN
AAAAAElFTkSuQmCC</Preview>
  <Form>m4B61FJG5xcAACODCAAAAAAABADVWF1v2jAUfZ+0/xDlOWpJCLSV2kiDtlq1dkODdY/IJFfg1djIdtqyXz87
gS4QJzFrYZsaoRru8f04x/Z1zr9MfkAsRfT+neOc5wNHLhdw4Q6XQsL86DumCXsSR9eMz/NPzzH9
5Dn3wAVm9CI8auk/z+mnRKYcLiikkiPiOYN0QnD8CZYj9gD0YnJygjpxp+uftUNonZ65DkVz5Tmf
13XiGSYJV4Zun1HJGRFuFqeKdMDZArhcrhAfUsmGMSJwiedAdRTK1FchBK3z47VtE/aOJeBG18pV
I6ZPMFA5xD8VwG/7Hc/pBCeNqDvEp5i6UddzVk8j5LP6dKO8II3GQ4m4HDCBpSqAG/VViMCHMQeg
jdgRPEs3ukOYOprOsv3Vo5puZawt+oQJSNxowVkMQow4ih+Aj3//dH6cQUz4W4aSdVZjPaixHc7Y
E30xzkZb1s2qHaHJSkF7165Ekzh35dcJuEzALYtRzpsfeo4flhio1pOWX/5YgHJFFcK0wAyBqApD
ckMTeHaj8poyQLK1EXRVKTstG4DiaDW9bwzJiuUBmsIhKF4oPw381jGsCA7ODEn+IcU1JGeBWkEG
KEkwnbpR23NWjxVuRXQn8JywW94D66k2CaNqb7qhQiJC9MZigfkm4B6LFJGhXBLoqc2pzwjjbjTi
KZhnaFZYL5WS0b0L7Op5wbjMnTWJzHCe0XimE+0xhVeH9Vc8nZVPtCaJtk8Un0H5gHqVTKuEWkzY
Erg6e1tap2ah1unOvPiqlJeHZwnZXXhbB57qLeKHzZqMs+82j70Md5xr9p9U8VeYs0f4uyr2Q/+A
Mi5mfBAZn+4k4zy8A8u4WJO3lfEtFvIew9PehXypHHE8SbWkxNrr7oq+ZLoe15gQSwo+4gTyzivT
8jUiwpa9wj5edY6/ufqNZdppGQRhVzcR5n6lbh3Yrm8l6j6bL1RpJgTUbUnCzVw1SD2YoUesxV1b
46K6b5TgPihiHtUcFamPizZl0RsmfCG7P0N0qi9X1RNv21qsqvIX/1xPHfwvPXVwsJ66bZdU4fq0
Q0+dNxliLx31lty2h83aU0t1wnrs+aAb/Nrpbpd3HRGSUnF9RZHaW5LqqlQKODgNNd37vfebUrW+
zbdbepGZmo5qNZYXyu5COFDDesmeKGEosWlZG2g8tXmr8hoaN0K1JtAPlZe2jZv67cS8mayDsgDs
vJcYOsvNGph6yw2lbQ4sTj48B77/c097GWy8Qn15x13MeZSlbLAej7bSLuS5/ldEvwDY/Ru45xcA
AA==</Form>
  <Code><![CDATA[$WindowStateEnum = New-Object System.Windows.Forms.FormWindowState
$ListViewEnum = New-Object System.Windows.Forms.View

$global:InitialState = Get-State
$global:Distribution = "Ubuntu"

$Window_Load = {
	$this.Icon = $Icon
	$this.Size = $Size
	$this.Text = $Title
	 
	Enable-Feature -Feature "Microsoft-Windows-Subsystem-Linux"
	Enable-Feature -Feature "VirtualMachinePlatform"
	wsl --set-default-version 2
	
	$DistributionsListView.Columns.Add('NAME', 150) | Out-Null
	$DistributionsListView.View = $ListViewEnum::Details
	$DistributionsListView.MultiSelect = $false
	$NameTextBox.Text = "nanstis"
	
	Update-View
}

$Window_Shown = {
	$DistributionComboBox.DropDownStyle = [System.Windows.Forms.ComboBoxStyle]::DropDownList
	$DistributionComboBox.DataSource = (Parse-Wsl -Options "-l -o" -SkipLines 8)
}

$DistributionsListView_ItemActivate = {
	Start-Distribution -Distribution $global:Distribution
}

$DownloadButton_Click = {
	Download-Distribution -Distribution $DistributionComboBox.SelectedValue
}

$RemoveButton_Click={
	Remove-Distribution -Distribution $global:Distribution
}

$ExportButton_Click = {
	Export-Distribution -Distribution $global:Distribution
	
}

$DistributionsListView_ItemSelectionChanged=[System.Windows.Forms.ListViewItemSelectionChangedEventHandler]{
	if ($_.Item.Selected)
	{
		$global:Distribution = $_.Item.Text
		Write-Host $global:Distribution
	}
}

function Start-Distribution([string]$Distribution)
{
	$Command = "wsl -d $Distribution -u nanstis"
	$Process = Process-Wsl -Command $Command
}

function Remove-Distribution([string]$Distribution)
{
	$Command = "wsl --unregister $Distribution"
	$Process = Process-Wsl -Command $Command -IsHidden $true
	Hold-Then -Process $Process
}

function Download-Distribution([string]$Distribution)
{
	$Command = "wsl --install $Distribution"
	$Process = Process-Wsl -Command $Command
	
	Hold-Then -Process $Process
}

function Export-Distribution([string]$Distribution)
{
	$TarFile = "${env:USERPROFILE}\.wslbuilder\kali.tar"
	$Command = "wsl --export $global:Distribution $TarFile"
	
	$Action = {
		[System.Windows.Forms.MessageBox]::Show("Successfully exported to $Path", $Distribution)
	}
	$Process = Process-Wsl -Command $Command 
	Hold-Then $Process -Action $Action
}

function Update-View()
{
	$DistributionsListView.Items.Clear()
	$items = (Parse-Wsl -Options "-l" -SkipLines 1)
	
	$items.ForEach({
			if ($_ -notlike "*docker*")
			{
				$item = New-Object System.Windows.Forms.ListViewItem($_)
				$DistributionsListView.Items.Add($item)
			}
		})
}

function Hold-Then([System.Diagnostics.Process]$Process, [ScriptBlock]$Action)
{	
	while ($Process)
	{
		$State = (Get-State)
		
		Start-Sleep -Seconds 1
		Write-Host "$global:InitialState -> $State"
		if ($global:InitialState -ne $State)
		{
			$global:InitialState = $State
			Update-View

			break
		}
	}
	
	$Action ? (& $Action): (Write-Host "Actionless")
}

function Process-Wsl([string]$Command, [boolean]$IsHidden = $false)
{
	$windowStyle = [System.Diagnostics.ProcessWindowStyle]::Normal
	
	if ($IsHidden)
	{
		$windowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden
	}
	
	$(Start-Process wt -Verb RunAs -ArgumentList "pwsh -Command $Command" -WindowStyle $windowStyle -PassThru)
}

function Run-Bash([string]$Distribution, [string]$Command)
{
	wsl -d $Distribution -e bash -c $Command
}


$processTracker_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending processes
	#Stop-ProcessTracker
}

$timerProcessTracker_Tick={
	Update-ProcessTracker
}

#region Process Tracker
function Stop-ProcessTracker
{
	<#
		.SYNOPSIS
			Stops and removes all processes from the list.
	#>
	#Stop the timer
	$timerProcessTracker.Stop()
	
	#Remove all the processes
	while($ProcessTrackerList.Count -gt 0)
	{
		$process = $ProcessTrackerList[0].Process
		$ProcessTrackerList.RemoveAt(0)
		if(-not $process.HasExited)
		{
			Stop-Process -InputObject $process
		}
	}
}

$ProcessTrackerList = New-Object System.Collections.ArrayList
function Add-ProcessTracker
{
	<#
		.SYNOPSIS
			Add a new process to the ProcessTracker and starts the timer.
	
		.DESCRIPTION
			Add a new process to the ProcessTracker and starts the timer.
	
		.PARAMETER  FilePath
			The path to executable.
	
		.PARAMETER ArgumentList
			The arguments to pass to the process.
	
		.PARAMETER CompletedScript
			The script block that will be called when the process is complete.
			The process is passed as an argument. The process argument is null when the job fails.
	
		.PARAMETER UpdateScript
			The script block that will be called each time the timer ticks.
			The process is passed as an argument.
	
		.PARAMETER RedirectOutputScript
			The script block that handles output from the process.
			Use $_.Data to access the output text.
	
		.PARAMETER RedirectErrorScript
			The script block that handles error output from the process.
			Use $_.Data to access the output text.
	
		.PARAMETER NoNewWindow
			Start the new process in the current console window.
	
		.PARAMETER WindowStyle
			Specifies the state of the window that is used for the new process. 
			Valid values are Normal, Hidden, Minimized, and Maximized. 
			The default value is Normal.
	
		.PARAMETER WorkingDirectory
			Specifies the location of the executable file or document that runs in the process. 
			The default is the current directory.
	
		.PARAMETER RedirectInput
			Redirects the input of the process. If this switch is set, the function will return the process object.
			Use the process object's StandardInput property to access the input stream.
	
		.PARAMETER PassThru
			Returns the process that was started.
	
		.PARAMETER SyncObject
			The object used to marshal the process event handler calls that are issued.
			You must pass a control to sync otherwise it will produce an error when redirecting output.

		.EXAMPLE
			 Add-ProcessTracker -FilePath 'notepad.exe' `
			-SyncObject $form1 `
			-CompletedScript {
				Param([System.Diagnostics.Process]$Process)
				$button.Enable = $true
			}`
			-UpdateScript {
				Param([System.Diagnostics.Process]$Process)
				Function-Animate $button
			}`
			-RedirectOutputScript {
			# Use $_.Data to access the output text
				$textBox1.AppendText($_.Data)
				$textBox1.AppendText("`r`n")
			}
		.EXAMPLE
			$process = Add-ProcessTracker -FilePath 'powershell.exe' `
			-RedirectInput `
			-SyncObject $buttonRunProcess `
			-RedirectOutputScript {
				# Use $_.Data to access the output text
				$richtextbox1.AppendText($_.Data)
				$richtextbox1.AppendText("`r`n")
			}
			
			#Write to the console
			$process.StandardInput.WriteLine("Get-Process")
	
		.OUTPUTS
			 System.Diagnostics.Process
	#>
	
	[OutputType([System.Diagnostics.Process])]
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]$FilePath,
		[string]$Arguments,
		[string]$WorkingDirectory,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.ISynchronizeInvoke]$SyncObject,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript,
		[ScriptBlock]$RedirectOutputScript,
		[ScriptBlock]$RedirectErrorScript,
		[System.Diagnostics.ProcessWindowStyle]$WindowStyle = 'Normal',
		[switch]$RedirectInput,
		[switch]$NoNewWindow,
		[switch]$PassThru
	)
	
	#Start the Process
	try
	{
		$process = New-Object System.Diagnostics.Process
		$process.StartInfo.FileName = $FilePath
		$process.StartInfo.WindowStyle = $WindowStyle
		
		if ($NoNewWindow)
		{
			$process.StartInfo.CreateNoWindow = $true
		}
		
		if ($WorkingDirectory)
		{
		 	$process.StartInfo.WorkingDirectory = $WorkingDirectory
		}
		
		#Handle Redirection
		if ($RedirectErrorScript)
		{
			$process.EnableRaisingEvents = $true
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.RedirectStandardError = $true
			$process.StartInfo.CreateNoWindow = $true
			$process.add_ErrorDataReceived($RedirectErrorScript)
		}
		
		if ($RedirectOutputScript)
		{
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.RedirectStandardOutput = $true
			$process.add_OutputDataReceived($RedirectOutputScript)
		}
		
		if($RedirectInput)
		{
			$process.EnableRaisingEvents = $true
			$process.StartInfo.UseShellExecute = $false
			$process.StartInfo.CreateNoWindow = $true
			$process.StartInfo.RedirectStandardInput = $true
			$PassThru = $true #Force the object to return
		}
		
		#Pass the arguments and sync with the form
		$process.StartInfo.Arguments = $Arguments
		$process.SynchronizingObject = $SyncObject
		$process.Start() | Out-Null
		
		#Begin the redirect reads
		if ($RedirectOutputScript)
		{
			$process.BeginOutputReadLine()
		}
		
		if ($RedirectErrorScript)
		{
			$process.BeginErrorReadLine()
		}
	}
	catch
	{
		Write-Error $_.Exception.Message
		$process = $null
	}
	
	if ($null -ne $process)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			"Process"	     = $process;
			"CompleteScript" = $CompletedScript;
			"UpdateScript"   = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$ProcessTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerProcessTracker.Enabled)
		{
			$timerProcessTracker.Start()
		}
			
		#Return the process if using PassThru
		if ($PassThru)
		{
			return $process
		}
	}
	elseif ($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-ProcessTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerProcessTracker.Stop() #Freeze the Timer
	
	for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
	{
		$psObject = $ProcessTrackerList[$index]
		
		if($null -ne $psObject) 
		{
			if($null -ne $psObject.Process)
			{
				if($psObject.Process.HasExited)
				{
					#Call the Complete Script Block
					if($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
					}
					
					$ProcessTrackerList.RemoveAt($index)
					$index-- #Step back so we don't skip a job
					$psObject.Process.Dispose()#clean up
				}
				elseif($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
				}
			}
		}
		else
		{
			$ProcessTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($ProcessTrackerList.Count -gt 0)
	{
		$timerProcessTracker.Start()#Resume the timer
	}
}
#endregion
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>Microsoft.Web.WebView2.Core, Version=1.0.1293.44, Culture=neutral, PublicKeyToken=2a8ab48044d2601e|..\..\..\..\..\Program Files\SAPIEN Technologies, Inc\PowerShell Studio 2023\Microsoft.Web.WebView2.Core.dll</Assembly>
    <Assembly>Microsoft.Web.WebView2.WinForms, Version=1.0.1293.44, Culture=neutral, PublicKeyToken=2a8ab48044d2601e|..\..\..\..\..\Program Files\SAPIEN Technologies, Inc\PowerShell Studio 2023\Microsoft.Web.WebView2.WinForms.dll</Assembly>
    <Assembly>Microsoft.Web.WebView2.Wpf, Version=1.0.1293.44, Culture=neutral, PublicKeyToken=2a8ab48044d2601e|..\..\..\..\..\Program Files\SAPIEN Technologies, Inc\PowerShell Studio 2023\Microsoft.Web.WebView2.Wpf.dll</Assembly>
  </Assemblies>
</File>